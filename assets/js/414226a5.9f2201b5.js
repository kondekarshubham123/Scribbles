"use strict";(self.webpackChunkscribbles=self.webpackChunkscribbles||[]).push([[4762],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),g=o,d=m["".concat(u,".").concat(g)]||m[g]||c[g]||a;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1345:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={description:"Author: @kondekarshubham123",tags:["Two Pointer"]},i="2 - Sum of Three Values",l={unversionedId:"category/grokkingcodinginterview/two-pointer/sum-of-three-values",id:"category/grokkingcodinginterview/two-pointer/sum-of-three-values",title:"2 - Sum of Three Values",description:"Author: @kondekarshubham123",source:"@site/dsa/category/grokkingcodinginterview/1-two-pointer/0002-sum-of-three-values.md",sourceDirName:"category/grokkingcodinginterview/1-two-pointer",slug:"/category/grokkingcodinginterview/two-pointer/sum-of-three-values",permalink:"/Scribbles/dsa/category/grokkingcodinginterview/two-pointer/sum-of-three-values",draft:!1,editUrl:"https://github.com/kondekarshubham123/Scribbles/tree/main/dsa/category/grokkingcodinginterview/1-two-pointer/0002-sum-of-three-values.md",tags:[{label:"Two Pointer",permalink:"/Scribbles/dsa/tags/two-pointer"}],version:"current",sidebarPosition:2,frontMatter:{description:"Author: @kondekarshubham123",tags:["Two Pointer"]},sidebar:"tutorialSidebar",previous:{title:"1 - Valid Palindrome (Easy)",permalink:"/Scribbles/dsa/category/grokkingcodinginterview/two-pointer/valid-palindrome"},next:{title:"3 - Remove nth Node From End of List",permalink:"/Scribbles/dsa/category/grokkingcodinginterview/two-pointer/remove-nth-node-from-end-of-list"}},u={},p=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointer Approch",id:"approach-1-two-pointer-approch",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},m=s("Tabs"),c=s("TabItem"),g=s("SolutionAuthor"),d={toc:p};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2---sum-of-three-values"},"2 - Sum of Three Values"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an array of integers, ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),", and an integer value, ",(0,o.kt)("inlineCode",{parentName:"p"},"target"),", determine if there are any three integers in ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," whose sum equals the ",(0,o.kt)("inlineCode",{parentName:"p"},"target"),". Return ",(0,o.kt)("strong",{parentName:"p"},"TRUE")," if three such integers are found in the array. Otherwise, return ",(0,o.kt)("strong",{parentName:"p"},"FALSE"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,-1,0], target = -1\nOutput: false\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [3,7,1,2,8,4,5], target = 10\nOutput: True\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"3 <= ",(0,o.kt)("inlineCode",{parentName:"li"},"nums.length")," <= 1000"),(0,o.kt)("li",{parentName:"ul"},"-10",(0,o.kt)("sup",null,"3")," <= ",(0,o.kt)("inlineCode",{parentName:"li"},"nums[i]"),"  <= 10",(0,o.kt)("sup",null,"3")," "),(0,o.kt)("li",{parentName:"ul"},"-10",(0,o.kt)("sup",null,"3")," <= ",(0,o.kt)("inlineCode",{parentName:"li"},"target"),"  <= 10",(0,o.kt)("sup",null,"3")," ")),(0,o.kt)("h2",{id:"approach-1-two-pointer-approch"},"Approach 1: Two Pointer Approch"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(g,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def find_sum_of_three(nums, target):\n    nums.sort()\n    for i in range(len(nums) - 2):\n        new_target = target - nums[i]\n        left = i + 1\n        right = len(nums) - 1\n\n        while left < right:\n            new_sum = nums[left] + nums[right]\n            if new_sum == new_target:\n                return True\n            \n            if new_sum > new_target:\n                right -= 1\n            else:\n                left += 1\n\n    return False\n\n"))),(0,o.kt)(c,{value:"java-sol-1",label:"Java",mdxType:"TabItem"},(0,o.kt)(g,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.*;\n\n\npublic class SumOfThree{\n   public static boolean findSumOfThree(int[] nums, int target) {\n      Arrays.sort(nums);\n      \n      int numsSize = nums.length;\n\n      for(int ptr1 = 0; ptr1 < numsSize - 2 ; ptr1 ++){\n         int ptr2 = ptr1 + 1;\n         int ptr3 = numsSize - 1;\n\n         int newTarget = target - nums[ptr1];\n\n         while(ptr2 < ptr3){\n            int new_sum = nums[ptr2] + nums[ptr3];\n\n            if(newTarget == new_sum){\n               return true;\n            } else if (new_sum > newTarget){\n               ptr3 -= 1;\n            } else {\n               ptr2 += 1;\n            }\n         }\n      }\n      return false;\n   }\n}\n")))))}f.isMDXComponent=!0}}]);
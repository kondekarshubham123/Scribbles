"use strict";(self.webpackChunkscribbles=self.webpackChunkscribbles||[]).push([[4121],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9404:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={description:"Author: @kondekarshubham123",tags:["Two Pointer"]},i="1 - Valid Palindrome (Easy)",l={unversionedId:"category/grokkingcodinginterview/two-pointer/valid-palindrome",id:"category/grokkingcodinginterview/two-pointer/valid-palindrome",title:"1 - Valid Palindrome (Easy)",description:"Author: @kondekarshubham123",source:"@site/dsa/category/grokkingcodinginterview/1-two-pointer/0001-valid-palindrome.md",sourceDirName:"category/grokkingcodinginterview/1-two-pointer",slug:"/category/grokkingcodinginterview/two-pointer/valid-palindrome",permalink:"/Scribbles/dsa/category/grokkingcodinginterview/two-pointer/valid-palindrome",draft:!1,editUrl:"https://github.com/kondekarshubham123/Scribbles/tree/main/dsa/category/grokkingcodinginterview/1-two-pointer/0001-valid-palindrome.md",tags:[{label:"Two Pointer",permalink:"/Scribbles/dsa/tags/two-pointer"}],version:"current",sidebarPosition:1,frontMatter:{description:"Author: @kondekarshubham123",tags:["Two Pointer"]},sidebar:"tutorialSidebar",previous:{title:"1 - Two-Pointer",permalink:"/Scribbles/dsa/category/1---two-pointer"},next:{title:"2 - Sum of Three Values",permalink:"/Scribbles/dsa/category/grokkingcodinginterview/two-pointer/sum-of-three-values"}},s={},p=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Two Pointer Approch",id:"two-pointer-approch",level:2},{value:"Other approches",id:"other-approches",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=c("Tabs"),d=c("TabItem"),m=c("SolutionAuthor"),h={toc:p};function k(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1---valid-palindrome-easy"},"1 - Valid Palindrome (Easy)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Write a function that takes a string s as input and checks whether it\u2019s a palindrome or not."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: A phrase, word or sequence is a palindrome that reads the same backwards as forwards.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "ABCBA"\nOutput: True\nExplanation: "ABCBA" is a palindrome.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "ABCCA"\nOutput: False\nExplanation: "ABCCA" is not a palindrome.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1 <= ",(0,a.kt)("inlineCode",{parentName:"li"},"s.length")," <= 2 * 10 ",(0,a.kt)("sup",null,"5")),(0,a.kt)("li",{parentName:"ul"},"The string won\u2019t have any spaces and will only consist of ASCII characters.")),(0,a.kt)("h2",{id:"two-pointer-approch"},"Two Pointer Approch"),(0,a.kt)("p",null,"The two-pointer approach works by comparing the characters at both ends of the string, starting from the first and last characters. If the characters are different, the string is not a palindrome and the function returns False. If the characters are the same, the pointers are moved towards each other, one step at a time, until they meet in the middle of the string."),(0,a.kt)("p",null,"If all the characters are the same and the pointers haven't returned False, then the string is a palindrome and the function returns True."),(0,a.kt)("p",null,"This approach is efficient, because it only needs to check half of the characters in the string, rather than checking each character individually."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(d,{value:"py-sol-1",label:"Python",mdxType:"TabItem"},(0,a.kt)(m,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def is_palindrome(s):\n    \n    left, right = 0, len(s) - 1\n\n    while left <= right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True\n"))),(0,a.kt)(d,{value:"java-sol-1",label:"Java",mdxType:"TabItem"},(0,a.kt)(m,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.*;\n\npublic class Main{\n    public static boolean isPalindrome(String s) {\n       \n       int ptr1 = 0;\n       int ptr2 = s.length() - 1;\n\n        while (ptr1 < ptr2){\n            if(s.charAt(ptr1) == s.charAt(ptr2)){\n                ptr1 += 1;\n                ptr2 -= 1;\n            } else{\n                return false;\n            }\n        }\n        return true;\n    }\n}\n")))),(0,a.kt)("h2",{id:"other-approches"},"Other approches"),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(d,{value:"py-sol-2",label:"Python",mdxType:"TabItem"},(0,a.kt)(m,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def is_palindrome(s):\n    return s==s[::-1]\n"))),(0,a.kt)(d,{value:"java-sol-2",label:"Java",mdxType:"TabItem"},(0,a.kt)(m,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.*;\n\npublic class Main{\n    public static boolean isPalindrome(String s) {\n        return new StringBuilder(s).reverse().toString().equals(s);\n    }\n}\n")))))}k.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkscribbles=self.webpackChunkscribbles||[]).push([[3316],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1775:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const i={description:"Author: @kondekarshubham123",tags:["Two Pointer"]},a="3 - Remove nth Node From End of List",l={unversionedId:"category/grokkingcodinginterview/two-pointer/remove-nth-node-from-end-of-list",id:"category/grokkingcodinginterview/two-pointer/remove-nth-node-from-end-of-list",title:"3 - Remove nth Node From End of List",description:"Author: @kondekarshubham123",source:"@site/dsa/category/grokkingcodinginterview/1-two-pointer/0003-remove-nth-node-from-end-of-list.md",sourceDirName:"category/grokkingcodinginterview/1-two-pointer",slug:"/category/grokkingcodinginterview/two-pointer/remove-nth-node-from-end-of-list",permalink:"/Scribbles/dsa/category/grokkingcodinginterview/two-pointer/remove-nth-node-from-end-of-list",draft:!1,editUrl:"https://github.com/kondekarshubham123/Scribbles/tree/main/dsa/category/grokkingcodinginterview/1-two-pointer/0003-remove-nth-node-from-end-of-list.md",tags:[{label:"Two Pointer",permalink:"/Scribbles/dsa/tags/two-pointer"}],version:"current",sidebarPosition:3,frontMatter:{description:"Author: @kondekarshubham123",tags:["Two Pointer"]},sidebar:"tutorialSidebar",previous:{title:"2 - Sum of Three Values",permalink:"/Scribbles/dsa/category/grokkingcodinginterview/two-pointer/sum-of-three-values"},next:{title:"4 - Sort Colors",permalink:"/Scribbles/dsa/category/grokkingcodinginterview/two-pointer/sort-colors"}},s={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Constraints:",id:"constraints",level:2},{value:"Linked List Starter Code",id:"linked-list-starter-code",level:2},{value:"Approch 1: Using Two Pointer approch",id:"approch-1-using-two-pointer-approch",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},m=p("Tabs"),c=p("TabItem"),u=p("SolutionAuthor"),f={toc:d};function k(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"3---remove-nth-node-from-end-of-list"},"3 - Remove nth Node From End of List"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given a singly linked list, remove the nth node from the end of the list and return its head."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 3\n23  ->  28  ->  10  ->  5   -> 67   ->  39  ->  70  -> Null\n\nOutput:\n23  ->  28  ->  10  ->  5   ->  39  ->  70  -> Null\n")),(0,o.kt)("h2",{id:"constraints"},"Constraints:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the list is k."),(0,o.kt)("li",{parentName:"ul"},"1 \u2264 k \u2264 10^4 "),(0,o.kt)("li",{parentName:"ul"},"\u221210^3 \u2264 Node.value \u226410^3"),(0,o.kt)("li",{parentName:"ul"},"1 \u2264 n \u2264 Number of nodes in the list")),(0,o.kt)("h2",{id:"linked-list-starter-code"},"Linked List Starter Code"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(c,{value:"LinkedListNode",label:"LinkedListNode",mdxType:"TabItem"},(0,o.kt)(u,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Template for linked list node class\n\nclass LinkedListNode:\n    # __init__ will be used to make a LinkedListNode type object.\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n"))),(0,o.kt)(c,{value:"LinkedList",label:"LinkedList",mdxType:"TabItem"},(0,o.kt)(u,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from linked_list_node import LinkedListNode\n\n# Template for the linked list\nclass LinkedList:\n    # __init__ will be used to make a LinkedList type object.\n    def __init__(self):\n        self.head = None\n\n    # insert_node_at_head method will insert a LinkedListNode at head\n    # of a linked list.\n    def insert_node_at_head(self, node):\n        if self.head:\n            node.next = self.head\n            self.head = node\n        else:\n            self.head = node\n\n    # create_linked_list method will create the linked list using the\n    # given integer array with the help of InsertAthead method.\n    def create_linked_list(self, lst):\n        for x in reversed(lst):\n            new_node = LinkedListNode(x)\n            self.insert_node_at_head(new_node)\n    \n    # __str__(self) method will display the elements of linked list.\n    def __str__(self):\n        result = ""\n        temp = self.head\n        while temp:\n            result += str(temp.data)\n            temp = temp.next\n            if temp:\n                result += ", "\n        result += ""\n        return result\n')))),(0,o.kt)("h2",{id:"approch-1-using-two-pointer-approch"},"Approch 1: Using Two Pointer approch"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(u,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from linked_list import LinkedList\nfrom linked_list_node import LinkedListNode\n\ndef remove_nth_last_node(head, n):\n    dummy = LinkedList()\n    dummy.next = head\n    first = dummy\n    second = dummy\n\n    for _ in range(n+1):\n        first = first.next\n\n    while first is not None:\n        first = first.next\n        second = second.next\n\n    second.next = second.next.next\n\n    return dummy.next\n")))))}k.isMDXComponent=!0}}]);